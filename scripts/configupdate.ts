import * as fs from 'fs';
import * as path from 'path';

/**
/**
 * Generates a TypeScript file with exported constants for configuration keys
 * and a union type of all key names, by reading from a package.json file.
 */
function generateConfigKeys() {
    // --- Path Configuration ---
    // The script is in /scripts, so we go up one level to the project root.
    const projectRoot = path.join(__dirname, '..');
    const packageJsonPath = path.join(projectRoot, 'package.json');
    const outputDir = path.join(projectRoot, 'src/config');
    const outputFile = path.join(outputDir, 'generated.ts');

    // --- Read package.json ---
    let packageJSON;
    try {
        const packageJsonContent = fs.readFileSync(packageJsonPath, 'utf-8');
        packageJSON = JSON.parse(packageJsonContent);
    } catch (error) {
        console.error(`Error reading or parsing ${packageJsonPath}:`, error);
        process.exit(1);
    }

    // --- Generate File Content ---
    const configPrefix = 'bazel-import.';

    // Find the configuration properties in package.json
    const configProperties = packageJSON.contributes?.configuration?.find(c => c.title === 'Bazel Import')?.properties;

    if (!configProperties) {
        console.error('Could not find configuration properties in package.json.');
        process.exit(1);
    }

    // Get an array of just the config key names (e.g., 'buildFile', 'notifyChange')
    const configKeyNames = Object.keys(configProperties)
        .filter(key => key.startsWith(configPrefix))
        .map(key => key.substring(configPrefix.length));

    // Create the constant export lines
    const exportLines = configKeyNames.map(configName => {
        // e.g., export const buildFile = "buildFile";
        return `export const ${configName.toUpperCase()} = "${configName}";`;
    });

    // Create the union type definition line
    const typeDefLine = `export type ConfigKey = ${configKeyNames.map(name => `"${name}"`).join(' | ')};`;

    const fileContent = [
        '// This file is auto-generated by a script. Do not edit directly.',
        '// It contains constants for the configuration keys from package.json.',
        '// Update with npm run config',
        '',
        ...exportLines,
        '',
        '// A union type of all possible configuration keys.',
        typeDefLine,
        '' // Add a trailing newline
    ].join('\n');

    // --- Write Output File ---
    // Ensure the output directory exists
    if (!fs.existsSync(outputDir)) {
        fs.mkdirSync(outputDir, { recursive: true });
    }

    // Write the generated content to the file, overwriting it if it exists.
    fs.writeFileSync(outputFile, fileContent, 'utf-8');

    console.log(`âœ… Successfully generated ${outputFile}`);
}

// Run the script
generateConfigKeys();
